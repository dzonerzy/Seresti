; Seresti configuration

[global]
; Global settings
listen = :8080  ; IP and port to listen to
server_name = REST-API ; Server name
serve_files = yes ; Set whether serve in directory files or not
serve_files_path = . ; Set the filesystem path to serve
serve_files_uri = fs ; Set the URI there filesystem will be served
serve_api_version = 1 ; Set which kind of api have to serve , version may be configured inside each service
verbose_error = yes ; Show verbose errors
debug = yes ; Debug is enable
index_path = ./static/

[hello]
; Simple hello service
name = hello ; Set service name (endpoint)
group = misc ; Set the service group (used in URI)
enabled = yes ; Set whether this service is enabled or not
version = 1 ; In order to serve must match 'serve_api_version'
method = GET ; Response only to GET requests
sh = scripts/hello.sh ; Bash file to run when service is called
input_parameters = person ; Declare shadow name for input parameters
output_parameters = message ; shadow name for result variables

[info]
; Simple info service
name = info ; Set service name (endpoint)
group = server ; Set the service group (used in URI)
enabled = yes ; Set whether this service is enabled or not
version = 1 ; In order to serve must match 'serve_api_version'
method = GET ; Response only to GET requests
sh = scripts/info.sh ; Bash file to run when service is called
input_parameters =  ; Declare shadow name for input parameters
output_parameters = hostname|os|uptime ; shadow name for result variables

[env]
; Simple info service
name = env ; Set service name (endpoint)
group = server ; Set the service group (used in URI)
enabled = yes ; Set whether this service is enabled or not
version = 1 ; In order to serve must match 'serve_api_version'
method = GET ; Response only to GET requests
sh = scripts/env.sh ; Bash file to run when service is called
input_parameters = test ; Declare shadow name for input parameters
output_parameters = name|value ; shadow name for result variables

[processes]
; Simple processes service
name = processes ; Set service name (endpoint)
group = server ; Set the service group (used in URI)
enabled = yes ; Set whether this service is enabled or not
version = 1 ; In order to serve must match 'serve_api_version'
method = GET ; Response only to GET requests
sh = scripts/processes.sh ; Bash file to run when service is called
input_parameters = filter; Declare shadow name for input parameters
output_parameters = user|pid|command ; shadow name for result variables
